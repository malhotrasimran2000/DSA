#include <bits/stdc++.h>
using namespace std;


bool presentInRow(int **arr , int row , int num, int n)
{
    for(int i=0; i<n; i++)
    {
        if(arr[row][i]==num)
            return true;
    }
    return false;
}

bool presentInCol(int **arr , int col , int num , int n)
{
    for(int i=0; i<n; i++)
    {
        if(arr[i][col]==num)
            return true;
    }
    return false;
}

bool presentInGrid(int **arr , int row , int col , int num, int n)
{
    if(n==3)
        return true;
    for(int i=0; i<n/3; i++)
    {
        for(int j=0; j<n/3; j++)
        {
            if(arr[row+i][col+j]==num)
                return true;
        }
    }
    return false;
} 
bool unassigned(int **arr , int n , int &row , int &col)
{
    for(row=0; row<n; row++)
        for( col=0; col<n; col++)
            if(arr[row][col]==0)
                return true;
    return false;
}

bool isSafe(int **arr , int row, int col , int n, int num)
{
    if(!presentInCol(arr , col , num , n) && !presentInRow(arr  ,row , num , n)
      && !presentInGrid(arr , row-row%3 , col-col%3 , num , n))
        return true;
    return false;
}

bool solver(int **arr , int n)
{
    int row , col;
    if(!unassigned(arr , n , row , col))
        return true;
    
    for(int i=1; i<=n; i++)
    {
        if(isSafe(arr , row, col , n , i))
        {
            arr[row][col]=i;
            if(solver(arr , n))
                return true;
            arr[row][col]=0;
        }
    }
    return false;
}


int main()
{
    int n;
    cin>>n;
    int **arr = new int* [n];
    for(int i=0; i<n; i++)
        arr[i]=new int[n];
    for(int i=0; i<n; i++)
        for(int j=0; j<n; j++)
            cin>>arr[i][j];
    solver(arr , n);
    for(int i=0; i<n; i++)
    {    
        for(int j=0; j<n; j++)
            cout<<arr[i][j]<<" ";
        cout<<endl;
    }
}
